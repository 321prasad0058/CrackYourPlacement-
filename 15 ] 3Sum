class Solution
{
  public List<List<Integer>> threeSum(int[] nums)
  {
   
// Brute Force : O(n^3)
   
//     int n = nums.length; 
//     Set<List<Integer>> st = new HashSet<>();

//     for(int i = 0; i<n; i++)
//     {
//       for(int j = i+1; j<n; j++)
//       {
//         for(int k = j+1; k<n; k++)
//         {
//           if(nums[i]+nums[j]+nums[k]==0)
//           {
//             List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k]);
//             temp.sort(null);
//             st.add(temp);
//           }
//         }
//       }
//     }
//     List<List<Integer>> ans = new ArrayList<>(st);
//     return ans;


// 


// Optimal : O(n^2)* log m

int n= nums.length;
Set<List<Integer>> st = new HashSet<>();

for(int i = 0; i<nums.length; i++)
{
  Set<Integer> set = new HashSet<>();
  for(int j = i+1; j<nums.length; j++)
  {
    int third = -(nums[i]+nums[j]);

    if(set.contains(third))
    {
      List<Integer> temp = Arrays.asList(nums[i],nums[j],third);
      temp.sort(null);
      st.add(temp);
    }
    set.add(nums[j]);
  }
}

List<List<Integer>> ans = new ArrayList<>(st);
return ans;
    
  }
}
